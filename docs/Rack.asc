= Rack
指定したファイルを独自の *Ruby DSL* として読み込み、DSLで指定した様々なミドルウェア、アプリケーションを組み合わせてWebサーバを立ち上げることができる *rackup* というコマンドを提供するライブラリ +
Ruby on Railsをインストールしている場合はすでに必須モジュールとして入っています

== 参考
- http://gihyo.jp/dev/serial/01/ruby/0023[Rackとは何か]
- https://railsguides.jp/rails_on_rack.html#rack%E5%85%A5%E9%96%80[Rails と Rack]

== Rack とは
Rackはこの *WSGI* に影響されて開発された，Rubyにおけるサーバとアプリケーション／フレームワーク間のインターフェースの役割を果たすライブラリ

=== 意味
「インターフェースが統一されていれば，サーバやフレームワークの組み合わせが自由になる」

NOTE: *WSGI* : PythonのためのWebサーバとWebアプリケーション/フレームワーク間の標準インターフェースを定める「仕様」

=== Rackアプリケーションとして最低限必要なこと
* callというメソッドを持っていること
* callメソッドの引数としてWebサーバからのリクエストを受けること
* callメソッドは，次の要素を含むレスポンスを返すること
** ステータスコード
** レスポンスヘッダ（Hash）
** レスポンスボディ（Array）

== 初めての Rack
simple_app.rb
----
class SimpleApp
  def call(env)
    p env
    case env['REQUEST_METHOD']
    when 'GET'
      [
        200,
        { 'Content-Type' => 'text/html' },
        ['<html><body><form method="POST"><input type="submit" value="見たい？" /></form></body></html>']
      ]
    when 'POST'
      [
        200,
        { 'Content-Type' => 'text/html' },
        ['<html><body>何見てんだよ</body></html>']
      ]
    end
  end
end
----
=== 実行方法
config.ruというファイルを用意し，rackupといういうコマンドを使ってアプリケーションを起動

config.ru
----
require '../simple_app.rb'
run SimpleApp.new
----

----
rails server
rackup config.ru
----
